# -*- coding: utf-8 -*-
"""Sentiment Analysis of Threads Reviews .ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/10r9_guB7b7myy2PZLA1vYcF4G-TWyBc4

Importing the libraries
"""

import numpy as np
import pandas as pd
import matplotlib.pyplot as plt

"""Importing the dataset"""

df=pd.read_csv("THREADS_REVIEWS.csv",nrows=10000)
df.head()

"""Cleaning the texts"""

df.drop(columns=["author_app_version","review_timestamp","review_id","pseudo_author_id","author_name","review_likes"],inplace=True)

df.head()

df['rated']=(df['review_rating']>2).astype(int)

df.head()

df.drop(columns=["review_rating"],inplace=True)

df.head()

import re
import nltk
nltk.download("stopwords")
from nltk.corpus import stopwords
from nltk.stem.porter import PorterStemmer
corpus=[]
for i in range(0,10000):
  review=re.sub('[^a-zA-Z]',' ',df['review_text'][i])
  review=review.lower()
  review=review.split()
  ps=PorterStemmer()
  all_stopwords=stopwords.words('english')
  all_stopwords.remove('not')
  review=[ps.stem(word) for word in review if not word in set(all_stopwords)]
  review=' '.join(review)
  corpus.append(review)

"""Creating the Bag of Words model"""

from sklearn.feature_extraction.text import CountVectorizer
cv=CountVectorizer(max_features=None)
x=cv.fit_transform(corpus).toarray()
y=df.iloc[:,1:].values

print(y)

print(len(corpus))

print(len(x[0]))

print(y.shape)

print(x.shape)

"""Splitting the dataset into the Training set and Test set"""

from sklearn.model_selection import train_test_split
x_train,x_test,y_train,y_test=train_test_split(x,y,test_size=0.2,random_state=0)

"""Training the Logistic Regression model on the Training set"""

from sklearn.linear_model import LogisticRegression
classifier = LogisticRegression(random_state = 0)
classifier.fit(x_train, y_train)

"""Predicting the Test set results"""

y_pred = classifier.predict(x_test)
print(np.concatenate((y_pred.reshape(len(y_pred),1),y_test.reshape(len(y_test),1)),1))

"""Making the Confusion Matrix"""

from sklearn.metrics import confusion_matrix, accuracy_score
cm = confusion_matrix(y_test, y_pred)
print(cm)
accuracy_score(y_test, y_pred)

print(x_test)

"""Prediciting Single Review As Positive or Negative"""

# Positive Review
#Input was a text and it is positive. Let's check what model predicts
new_review = 'Allow us to use multiple accounts at a time like "switch account" and also add a "like section" where we can see what we like or how many post we have liked.'
new_review = re.sub('[^a-zA-Z]', ' ', new_review)
new_review = new_review.lower()
new_review = new_review.split()
ps = PorterStemmer()
all_stopwords = stopwords.words('english')
all_stopwords.remove('not')
new_review = [ps.stem(word) for word in new_review if not word in set(all_stopwords)]
new_review = ' '.join(new_review)
new_corpus = [new_review]
new_x_test = cv.transform(new_corpus).toarray()
new_y_pred = classifier.predict(new_x_test)
print(new_y_pred)

# Negative Review
#Input was a text and it is negative. Let's check what model predicts
new_review = 'Its just a copy of twitter with alot of restrictions'
new_review = re.sub('[^a-zA-Z]', ' ', new_review)
new_review = new_review.lower()
new_review = new_review.split()
ps = PorterStemmer()
all_stopwords = stopwords.words('english')
all_stopwords.remove('not')
new_review = [ps.stem(word) for word in new_review if not word in set(all_stopwords)]
new_review = ' '.join(new_review)
new_corpus = [new_review]
new_x_test = cv.transform(new_corpus).toarray()
new_y_pred = classifier.predict(new_x_test)
print(new_y_pred)